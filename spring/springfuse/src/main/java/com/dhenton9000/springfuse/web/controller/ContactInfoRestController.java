/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-mvc-3:src/main/java/web/controller/restController.e.vm.java
 */
package com.dhenton9000.springfuse.web.controller;

import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.support.FormattingConversionService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.dhenton9000.springfuse.web.util.AutoCompleteResult;
import com.dhenton9000.springfuse.web.util.SearchParameters;
import com.dhenton9000.springfuse.domain.ContactInfo;
import com.dhenton9000.springfuse.service.ContactInfoService;

@Controller
@RequestMapping("domain/rest/contactinfo/")
public class ContactInfoRestController {
    @Autowired
    public FormattingConversionService formattingConversionService;

    @Autowired
    private ContactInfoService contactInfoService;

    @RequestMapping(value = "/", method = POST)
    @ResponseBody
    public ContactInfo create(@Valid ContactInfo contactInfo) {
        contactInfoService.save(contactInfo);
        return contactInfo.copy();
    }

    @RequestMapping(value = "/", method = POST, headers = "content-type:application/json")
    @ResponseBody
    public ContactInfo jsonCreate(@Valid @RequestBody ContactInfo contactInfo) {
        contactInfoService.save(contactInfo);
        return contactInfo.copy();
    }

    @RequestMapping(value = "/", method = GET)
    @ResponseBody
    public List<ContactInfo> list(ContactInfo contactInfo, SearchParameters searchParameters) {
        List<ContactInfo> contactInfos = contactInfoService.find(contactInfo, searchParameters.toSearchTemplate());
        List<ContactInfo> ret = new ArrayList<ContactInfo>();
        for (ContactInfo _contactInfo : contactInfos) {
            ret.add(_contactInfo.copy());
        }
        return ret;
    }

    @RequestMapping(value = "/{pk}", method = GET)
    @ResponseBody
    public ContactInfo get(@PathVariable("pk") ContactInfo contactInfo) {
        return contactInfo.copy();
    }

    @RequestMapping(value = "/{pk}", method = PUT)
    @ResponseBody
    public ContactInfo update(@PathVariable("pk") ContactInfo contactInfoToUpdate, @Valid ContactInfo contactInfo) {
        contactInfo.copyTo(contactInfoToUpdate);
        contactInfoService.save(contactInfoToUpdate);
        return contactInfoToUpdate.copy();
    }

    @RequestMapping(value = "/{pk}", method = DELETE)
    @ResponseBody
    public boolean delete(@PathVariable("pk") ContactInfo contactInfo) {
        contactInfoService.delete(contactInfo);
        return true;
    }

    @RequestMapping("/autocomplete")
    @ResponseBody
    public List<AutoCompleteResult> autocomplete(@RequestParam(value = "term", required = false) String searchPattern,
            SearchParameters search) {
        if (searchPattern != null && !searchPattern.isEmpty()) {
            search.setSearchPattern(searchPattern);
        }
        List<AutoCompleteResult> ret = new ArrayList<AutoCompleteResult>();
        for (ContactInfo contactInfo : contactInfoService.find(search.toSearchTemplate())) {
            String objectPk = contactInfo.getPrimaryKey().toString();
            String objectLabel = formattingConversionService.convert(contactInfo, String.class);
            ret.add(new AutoCompleteResult(objectPk, objectLabel));
        }
        return ret;
    }

    @ExceptionHandler()
    @ResponseStatus(value = INTERNAL_SERVER_ERROR)
    public void exception(Exception e, PrintWriter out) {
        out.write(e.getMessage());
    }
}