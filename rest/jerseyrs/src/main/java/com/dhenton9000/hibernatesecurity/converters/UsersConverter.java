package com.dhenton9000.hibernatesecurity.converters;
// Generated Jun 17, 2010 4:41:51 PM by Hibernate Tools 3.2.1.GA

import com.dhenton9000.hibernatesecurity.ApplicationGroups;
import com.dhenton9000.hibernatesecurity.Applications;
import com.dhenton9000.hibernatesecurity.GroupAssignments;
import com.dhenton9000.hibernatesecurity.Groups;
import com.dhenton9000.hibernatesecurity.Users;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.*;

/**
 * Users generated by hbm2java
 */
@XmlRootElement(name="users") 
@XmlType(name="", propOrder={"userId","username","groups","applications"})
 
public class UsersConverter {

    /**
     * 
     */
    private static final long serialVersionUID = -6216870885143240769L;
    private String userId;
    private String username;
    private ArrayList<GroupsConverter> groups = new ArrayList<GroupsConverter>();
    private ArrayList<ApplicationsConverter> applications = new ArrayList<ApplicationsConverter>();
    private boolean fullyHydrated = false;

    public UsersConverter() {
    }

    public UsersConverter(Users u)
    {
        this.userId = u.getUserId();
        this.username = u.getUsername();
    }
    public UsersConverter(String userId, String username) {
        this.userId = userId;
        this.username = username;
    }
    public UsersConverter(String userId, String username, Set groupAssignmentses) {
        setUp(userId, username, groupAssignmentses);
    }
    
    public UsersConverter(String userId, String username, Set groupAssignmentses,boolean fullyHydrate) {
        fullyHydrated = fullyHydrate;
        setUp(userId, username, groupAssignmentses);
    }


    private void setUp(String userId, String username, Set groupAssignmentses) {
       
        this.userId = userId;
        this.username = username;
        List<Object> groupsList = Arrays.asList(groupAssignmentses.toArray());
        for (Object og : groupsList) {
            GroupAssignments ga = (GroupAssignments) og;
            Groups g = ga.getGroups();
            GroupsConverter gNew = new GroupsConverter(g);
            groups.add(gNew);
            if (this.isFullyHydrated()) {
                 List<Object> appsList = Arrays.asList(g.getApplicationGroupses().toArray());
                 for (Object aa:appsList)
                 {
                     ApplicationGroups aGrp = (ApplicationGroups)aa;
                     Applications a = (Applications) aGrp.getApplications();
                     ApplicationsConverter ac = new ApplicationsConverter(a);
                     applications.add(ac);
                 }
             }// end if fully hydrated
        }// end for groupsList
        
    }

    public String getUserId() {
        return this.userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    

    @Override
    public String toString() {
        String info = "";
        info = "Id: " + userId + " -- name: " + username;


        return info;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final UsersConverter other = (UsersConverter) obj;
        if ((this.userId == null) ? (other.userId != null) : !this.userId.equals(other.userId)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 67 * hash + (this.userId != null ? this.userId.hashCode() : 0);
        return hash;
    }

    /**
     * @return the groups
     */
    @XmlElementWrapper(name = "groups")
    @XmlElement(name = "group") 
    public ArrayList<GroupsConverter> getGroups() {
        return groups;
    }

    /**
     * @return the applications
     */
    @XmlElementWrapper(name = "applications")
    @XmlElement(name = "application")
    public ArrayList<ApplicationsConverter> getApplications() {
        return applications;
    }

    /**
     * @return the fullyHydrated
     */
    @XmlTransient
    public boolean isFullyHydrated() {
        return fullyHydrated;
    }
}
