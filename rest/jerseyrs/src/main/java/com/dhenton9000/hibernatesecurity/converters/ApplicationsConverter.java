package com.dhenton9000.hibernatesecurity.converters;
// Generated Jun 17, 2010 4:41:51 PM by Hibernate Tools 3.2.1.GA

import com.dhenton9000.hibernatesecurity.ApplicationGroups;
import com.dhenton9000.hibernatesecurity.Applications;
import com.dhenton9000.hibernatesecurity.GroupAssignments;
import com.dhenton9000.hibernatesecurity.Groups;
import com.dhenton9000.hibernatesecurity.Users;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

/**
 * Applications generated by hbm2java
 */
@XmlRootElement(name="applications") 
@XmlType(name="", propOrder={"applicationName","id","groups","users"})

public class ApplicationsConverter implements java.io.Serializable, Cloneable {

    private int id;
    private String applicationName;
    private ArrayList<GroupsConverter> groups = new ArrayList<GroupsConverter>();
    private ArrayList<UsersConverter> users = new ArrayList<UsersConverter>();
    private boolean fullyHydrated = false;

    public ApplicationsConverter() {
    }

    public ApplicationsConverter(int id, String appName, Set applicationGroups, boolean full) {
        this.fullyHydrated = full;
        setUp(id, appName, applicationGroups);
    }

    public ApplicationsConverter(int id, String appName, Set applicationGroups) {
        setUp(id, appName, applicationGroups);

    }

    private void setUp(int id, String appName, Set applicationGroups) {
        
        this.id = id;
        this.applicationName = appName;
        List<Object> appsList = Arrays.asList(applicationGroups.toArray());
        for (Object og : appsList) {
            ApplicationGroups ga = (ApplicationGroups) og;
            Groups g = ga.getGroups();
            GroupsConverter gNew = new GroupsConverter(g);
            groups.add(gNew);
            if (this.isFullyHydrated()) {
                 List<Object> gasList = Arrays.asList(g.getGroupAssignmentses().toArray());
                 for (Object aa:gasList)
                 {
                     GroupAssignments aGrp = (GroupAssignments)aa;
                     Users a = (Users) aGrp.getUsers();
                     UsersConverter ac = new UsersConverter(a);
                     users.add(ac);
                 }
             }// end if fully hydrated
        }// end for groupsList
        
        
        
        
    }

    public ApplicationsConverter(int id, String appName) {
        this.id = id;
        this.applicationName = appName;

    }

    public ApplicationsConverter(Applications app) {
        this.id = app.getId();
        this.applicationName = app.getApplicationName();

    }
    @XmlElement(name="applicationId")
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getApplicationName() {
        return this.applicationName;
    }

    public void setApplicationName(String applicationName) {
        this.applicationName = applicationName;
    }

    @Override
    public ApplicationsConverter clone() throws CloneNotSupportedException {

        ApplicationsConverter a = null;

        a = new ApplicationsConverter();
        a.setApplicationName(getApplicationName());
        a.setId(getId());

        return a;
    }

    /**
     * @return the groups
     */
    
    
    @XmlElementWrapper(name = "groups")
    @XmlElement(name = "group") 
    public ArrayList<GroupsConverter> getGroups() {
        return groups;
    }

    /**
     * @return the users
     */
    
    @XmlElementWrapper(name = "users")
    @XmlElement(name = "user") 
    public ArrayList<UsersConverter> getUsers() {
        return users;
    }

    /**
     * @return the fullyHydrated
     */
    @XmlTransient
    public boolean isFullyHydrated() {
        return fullyHydrated;
    }

    /**
     * @param fullyHydrated the fullyHydrated to set
     */
    public void setFullyHydrated(boolean fullyHydrated) {
        this.fullyHydrated = fullyHydrated;
    }
}
