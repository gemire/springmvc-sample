package com.dhenton9000.registration.components.ws;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.5.1
 * 2012-01-26T15:49:54.457-06:00
 * Generated source version: 2.5.1
 * 
 */
@WebServiceClient(name = "RegistrationServiceWSDL", 
                  wsdlLocation = "/home/dhenton/NetBeansProjects/MuleChoice/src/main/resources/RegistrationService.wsdl",
                  targetNamespace = "uri:dhenton9000:registrationService") 
public class RegistrationServiceWSDLClient extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("uri:dhenton9000:registrationService", "RegistrationServiceWSDL");
    public final static QName RegistrationServiceWSDLSOAP = new QName("uri:dhenton9000:registrationService", "RegistrationServiceWSDLSOAP");
    static {
        URL url = null;
        try {              ///home/dhenton/NetBeansProjects/MuleChoice/src/main/resources/RegistrationService.wsdl
            url = new URL("file://src/main/resources/RegistrationService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(RegistrationServiceWSDLClient.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "/home/dhenton/NetBeansProjects/MuleChoice/src/main/resources/RegistrationService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public RegistrationServiceWSDLClient(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public RegistrationServiceWSDLClient(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RegistrationServiceWSDLClient() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns RegistrationServiceWSDL
     */
    @WebEndpoint(name = "RegistrationServiceWSDLSOAP")
    public RegistrationServiceWSDL getRegistrationServiceWSDLSOAP() {
        return super.getPort(RegistrationServiceWSDLSOAP, RegistrationServiceWSDL.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RegistrationServiceWSDL
     */
    @WebEndpoint(name = "RegistrationServiceWSDLSOAP")
    public RegistrationServiceWSDL getRegistrationServiceWSDLSOAP(WebServiceFeature... features) {
        return super.getPort(RegistrationServiceWSDLSOAP, RegistrationServiceWSDL.class, features);
    }

}
