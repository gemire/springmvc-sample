/*
 * Generated by the Mule project wizard. http://mule.mulesoft.org
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package com.mule.example.tcp;

import org.junit.Test;
import org.mule.api.MuleMessage;
import org.mule.api.client.MuleClient;
import org.mule.tck.junit4.FunctionalTestCase;
import org.mule.transport.NullPayload;

import static org.junit.Assert.*;

public class ProtocolTestCase extends FunctionalTestCase {

    public static final String SINGLE_TEST_INPUT = "<info><name>bonzo</name</info>";
    public static final String MULTI_TEST_INPUT = "<info><name>bonzo</name</info><info><name>maurice</name</info>";
    public static final String GARBAGE = "get a job";
    public static final int REPEAT_COUNT = 3;

    protected String getConfigResources() {
        return "protocol-mule-config.xml";
    }

    @Test
    public void testSingleBlock() throws Exception {
        MuleClient client = muleContext.getClient();
        MuleMessage result = client.send("protocolendpoint", SINGLE_TEST_INPUT, null);

        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);

        // Assert that the expected payload has been received.
        assertTrue(result.getPayload() instanceof String);

        String dataObject = (String) result.getPayload();

        // Assert id returned as expected (note: Echo increments id by 1)
        assertEquals(SINGLE_TEST_INPUT, dataObject);
    }

    @Test
    public void testMultiBlock() throws Exception {
        MuleClient client = muleContext.getClient();
        
        StringBuffer b = new StringBuffer();
        for (int i=0;i<REPEAT_COUNT;i++)
        {
            b.append(SINGLE_TEST_INPUT);
        }
        
        MuleMessage result = client.send("protocolendpoint", b.toString(), null);

        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);

        // Assert that the expected payload has been received.
        assertTrue(result.getPayload() instanceof String);

        String dataObject = (String) result.getPayload();

        // Assert id returned as expected (note: Echo increments id by 1)
        assertEquals(b.toString(), dataObject);
    }
    
    
   @Test
    public void testGarbage() throws Exception {
        MuleClient client = muleContext.getClient();
        client.send("protocolendpoint", GARBAGE, null);

//        assertNotNull(result);
//        assertNull(result.getExceptionPayload());
//        assertTrue(result.getPayload() instanceof NullPayload);

         
    }
    
}
