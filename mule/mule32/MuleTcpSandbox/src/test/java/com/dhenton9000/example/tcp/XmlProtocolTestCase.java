/*
 * Generated by the Mule project wizard. http://mule.mulesoft.org
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package com.dhenton9000.example.tcp;

import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import org.apache.commons.io.IOUtils;
import org.junit.Test;
import org.junit.Ignore;
import org.mule.api.MuleMessage;
import org.mule.api.client.MuleClient;
import org.mule.tck.junit4.FunctionalTestCase;
import org.mule.transport.NullPayload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import static org.junit.Assert.*;
import org.junit.BeforeClass;


public class XmlProtocolTestCase extends FunctionalTestCase {

    private static String message = null;
    private static final Logger logger = LoggerFactory.getLogger(XmlProtocolTestCase.class);
    protected String getConfigResources() {
        return "xml-protocol-mule-config.xml";
    }

    @BeforeClass
    public static void beforeTest() throws Exception
    {
           message = getMessage("test-samples/simpleSample.xml");
    }
    @Test
    public void testSingleBlock() throws Exception {
        MuleClient client = muleContext.getClient();
       
        MuleMessage result = client.send("xmlProtocolendpoint", message.getBytes(), null);

        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);

        // Assert that the expected payload has been received.
        assertTrue(result.getPayload() instanceof String);

        String dataObject = (String) result.getPayload();

        // Assert id returned as expected (note: Echo increments id by 1)
        assertEquals(message, dataObject);
    }

    @Test
    public void testMultiBlock() throws Exception {
        MuleClient client = muleContext.getClient();
        String multiMessage = getMessage("test-samples/multiSample.xml");
        assertNotNull(message);
        MuleMessage result = client.send("xmlProtocolendpoint", multiMessage.getBytes(), null, -1);
        
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);

        // Assert that the expected payload has been received.
        assertTrue(result.getPayload() instanceof String);

        String dataObject = (String) result.getPayload();

        // Assert id returned as expected (note: Echo increments id by 1)
        assertEquals(message, dataObject);
    }

 

    private static String getMessage(String item) {
        InputStream inputStream = ClassLoader.getSystemClassLoader().getResourceAsStream(item);
        StringWriter writer = new StringWriter();
        try {
            IOUtils.copy(inputStream, writer, "UTF-8");
        } catch (IOException ex) {
            throw new RuntimeException("io problem with '"+item+"'");
        }
        return writer.toString();
         

    }
}
