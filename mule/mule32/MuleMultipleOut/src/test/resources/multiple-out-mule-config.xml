<?xml version="1.0" encoding="UTF-8"?>
 <!--
 
 This will be a file that demonstrates the coordination of JDBC and JMS
 via XA transactions
 in the UMO
 write out records
 post jms that announces that those records were written
 wait by spinning in thread
 
 listen on queue for the announcement 
 use info on message to look up the announced records
 if the messages go out before db commit, that's a problem signaled
 by no record found
 
 -->
<mule xmlns="http://www.mulesoft.org/schema/mule/core" 
      xmlns:jms="http://www.mulesoft.org/schema/mule/jms" 
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm" 
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:core="http://www.mulesoft.org/schema/mule/core" 
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      version="CE-3.2.1" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.2/mule-vm.xsd       
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/3.2/mule-jms.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd ">
    <spring:beans>
        
        <spring:import resource="embedded-activemq-broker.xml" /> 
        <spring:bean id="multipleComponent" name="multipleComponent" 
                         class="com.dhenton9000.multiple.out.MultipleComponent" />
        <spring:bean id="listToJmsMessage"  name="listToJmsMessage" 
                         class="com.dhenton9000.multiple.out.ListToJMSMessage"  />
    </spring:beans>
     
    
    <jms:activemq-connector name="jmsConnector"
                            
                            specification="1.1"
                                   maxRedelivery="0"
                                   eagerConsumer="false"
                                   connectionFactory-ref="AmqConnectionFactory"
                                   disableTemporaryReplyToDestinations="true"
                                   persistentDelivery="true" />
   
    <flow name="MultipleOutFlow">
       
        <vm:inbound-endpoint path="multiple.in" />
        <component>
            <spring-object bean="multipleComponent" />
        </component>
        <collection-splitter />
       
        <choice>
            <when expression="payload instanceof com.dhenton9000.multiple.out.items.AlphaCollection" evaluator="groovy">
                <processor-chain>
                    <component>
                        <spring-object bean="listToJmsMessage" />
                    </component>
                    <jms:outbound-endpoint queue="multiple-output-a" connector-ref="jmsConnector" />
                </processor-chain>
            </when>
            <when expression="payload instanceof com.dhenton9000.multiple.out.items.BetaCollection" evaluator="groovy">
                <processor-chain>
                    <component>
                        <spring-object bean="listToJmsMessage" />
                    </component>
                    <jms:outbound-endpoint queue="multiple-output-b" connector-ref="jmsConnector" />
                </processor-chain>
            </when>
            <otherwise>
                <processor-chain>
                    <log-component  />
                </processor-chain>
            </otherwise>
        </choice>
  
        <default-exception-strategy>
            <log-component />
        </default-exception-strategy>
    
    </flow>
    
    <flow name="MultipleA_ActivityMonitor">
        <jms:inbound-endpoint  queue="multiple-output-a"  connector-ref="jmsConnector">
            
        </jms:inbound-endpoint>
        <log-component/>
    </flow>
    
    <flow name="MultipleB_ActivityMonitor">
        <jms:inbound-endpoint  queue="multiple-output-b"  connector-ref="jmsConnector">
             
        </jms:inbound-endpoint>
        <log-component/>
    </flow>
    <!--
    <flow name="DLQInputMonitor">
        <jms:inbound-endpoint queue="DLQ.jdbc-input" connector-ref="jmsXAConnector">
             <xa-transaction   action="ALWAYS_BEGIN"/>
        </jms:inbound-endpoint>
        <log-component />
    </flow>
    <flow name="DLQOutputMonitor">
        <jms:inbound-endpoint queue="DLQ.jdbc-output" connector-ref="jmsXAConnector">
             <xa-transaction   action="ALWAYS_BEGIN"/>
        </jms:inbound-endpoint>
        <log-component />
    </flow>
 -->
</mule>
