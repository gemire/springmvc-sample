<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
      xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.2/mule-http.xsd
        http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/3.2/mule-jms.xsd
        http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.2/mule-vm.xsd">

    <description>
        A demonstration of writing to jms queues with the starting point untransacted
        This is to explore some possible problems with jms transactions not being
        committed.
    
    </description>
      
    <spring:beans>
        
        <spring:import resource="embedded-activemq-broker.xml" /> 
         
    </spring:beans>
    
    <jms:activemq-connector name="jmsConnector"
                            
                            specification="1.1"
                             maxRedelivery="0"
                             eagerConsumer="false"
                             connectionFactory-ref="AmqConnectionFactory"
                             disableTemporaryReplyToDestinations="true"
                             persistentDelivery="true" />
    <flow name="JmsWriteDemoFlow"> 
         
         <!-- http://localhost:9091/jms-test?message=getajob -->
         <!-- not transacted so the jms outbound cannot be transacted -->
        <http:inbound-endpoint exchange-pattern="one-way" 
                               host="localhost" port="9091" path="jms-test">
            <http:body-to-parameter-map-transformer/>
            <not-filter>
                <wildcard-filter pattern="/favicon.ico"/>   
            </not-filter>
        </http:inbound-endpoint>
            

        <expression-transformer name="extractResult">
           
            <return-argument evaluator="groovy" expression="payload.get('message')"/>           
        </expression-transformer>
       
         
        
        <jms:outbound-endpoint  queue="test.queue" connector-ref="jmsConnector">
            
            <!--
             <jms:transaction action="ALWAYS_BEGIN" />
             if this is present, the logs will report resource rollback and a 
             WARN message about no resource found
            -->
        </jms:outbound-endpoint>

        <!-- Route unexpected errors to separate error handler -->
        <default-exception-strategy>
            <vm:outbound-endpoint path="systemErrorHandler" exchange-pattern="one-way"/>
        </default-exception-strategy>
    </flow>

    <flow name="testListener">
       
        <jms:inbound-endpoint  queue="test.queue" connector-ref="jmsConnector">
            <!-- transaction here because its the start of the flow and can be transacted -->
            <jms:transaction action="ALWAYS_BEGIN" />
        </jms:inbound-endpoint>
        <log-component />
        <default-exception-strategy>
            <vm:outbound-endpoint path="systemErrorHandler" exchange-pattern="one-way"/>
        </default-exception-strategy>
    </flow>
   
    
    
    <!-- Handle any unexpected errors. Errors could also be routed elsewhere,
        e.g. into an error file, send via email to a list, stored in a database, etc. -->
    <flow name="SystemErrorHandler">
        <vm:inbound-endpoint path="systemErrorHandler" exchange-pattern="request-response"/>
        <outbound-endpoint address="stdio://ERR" exchange-pattern="one-way"/>
    </flow>
</mule>
