<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" 
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security"
      xmlns:ss="http://www.springframework.org/schema/security"
      xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" 
      xmlns:file="http://www.mulesoft.org/schema/mule/file" 
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm" 
      xmlns:jms="http://www.mulesoft.org/schema/mule/jms" 
      xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" 
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:spring="http://www.springframework.org/schema/beans" 
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      version="CE-3.2.1"
      xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.2/mule-http.xsd 
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/3.2/mule-cxf.xsd 
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/3.2/mule-file.xsd 
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/3.2/mule-jms.xsd 
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/3.2/mule-xml.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.2/mule-vm.xsd 
http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/3.2/mule-spring-security.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd ">



<!--
    <mulexml:namespace-manager
        includeConfigNamespaces="false">
        <mulexml:namespace prefix="ns2" 
                                   uri="uri:dhenton9000:registrationService:ref" />
        	
    </mulexml:namespace-manager>
-->

<mulexml:jaxb-xml-to-object-transformer
        name="stringToResponse"
        returnClass="com.dhenton9000.registration.bindings.RegisterResponse"
        jaxbContext-ref="registrationJaxbContext" />
  <mulexml:jaxb-xml-to-object-transformer
        name="stringToInput"
        returnClass="com.dhenton9000.registration.bindings.RegisterInput"
        jaxbContext-ref="registrationJaxbContext" />
 <mulexml:dom-to-xml-transformer name="DomToXml" />
    <mulexml:xml-prettyprinter-transformer
        name="xmlPrettyPrinter" />
  <mulexml:jaxb-object-to-xml-transformer 
        name="jaxbToString" returnClass="java.lang.String"
        jaxbContext-ref="registrationJaxbContext" />

    <spring:beans>
        
        <spring:import resource="embedded-activemq-broker.xml" /> 
     
        <spring:bean name="registrationJaxbContext" class="javax.xml.bind.JAXBContext"
                      factory-method="newInstance">
		
            <spring:constructor-arg
                value="com.dhenton9000.registration.bindings" />
        </spring:bean>
       
        	
        <spring:bean name="registrationJaxbCreator" class="com.dhenton9000.registration.services.JaxbService">
            <spring:property name="jaxbContext" ref="registrationJaxbContext" />
        </spring:bean>
     
    </spring:beans>

    <jms:activemq-connector name="jmsConnector"
                            
                            specification="1.1"
                            maxRedelivery="0"
                            eagerConsumer="false"
                            connectionFactory-ref="AmqConnectionFactory"
                            disableTemporaryReplyToDestinations="true"
                            persistentDelivery="true" />
    <flow name="MuleWebServiceFlow" doc:name="MuleWebFlow">
        <http:inbound-endpoint exchange-pattern="request-response"
                               address="http://localhost:9091/registration" doc:name="HTTP">
      <!--  </http:inbound-endpoint> -->
            <cxf:jaxws-service validationEnabled="true" wsdlLocation="RegistrationService.wsdl"
                        
                        serviceClass="com.dhenton9000.registration.components.ws.RegistrationServiceWSDLImpl"
                               enableMuleSoapHeaders="true">

                <cxf:outFaultInterceptors>
                    <spring:bean id="outfault"
                                 class="com.dhenton9000.cxf.interceptors.SoapFaultInterceptor" />
                </cxf:outFaultInterceptors>

            </cxf:jaxws-service>
        </http:inbound-endpoint>
         
         <!-- injection of jms template done in the setContext method of the Impl -->
        <component>
            <singleton-object class="com.dhenton9000.registration.components.ws.RegistrationServiceWSDLImpl" />
        </component>
        
    </flow>


    <flow name="registrationWebClientFlow">
        <vm:inbound-endpoint path="registrationWebClientDispatch" exchange-pattern="request-response" />
        <http:outbound-endpoint    exchange-pattern="request-response"
                                   address="http://@localhost:9091/registration">        
            <cxf:jaxws-client
                serviceClass="com.dhenton9000.registration.components.ws.RegistrationServiceWSDL"
                operation="register" />
        </http:outbound-endpoint>
        
         
        <default-exception-strategy>
            <component class="com.dhenton9000.ws.sandbox.ExceptionHandler" />
        </default-exception-strategy>
        
    </flow>

    <flow name="ActivityMonitor">
        <jms:inbound-endpoint  queue="testQueue.in"  connector-ref="jmsConnector" transformer-refs="stringToInput" />
        <component class="com.dhenton9000.registration.components.RegistrationBusComponent" />
    </flow>
    
    <flow name="DLQInputMonitor">
        <jms:inbound-endpoint queue="DLQ.testQueue.in" connector-ref="jmsConnector" />
        <log-component />
    </flow>

</mule>
