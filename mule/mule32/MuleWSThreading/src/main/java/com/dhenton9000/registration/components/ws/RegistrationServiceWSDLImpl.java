/**
 * Please modify this class to meet your needs This class is not complete
 */
package com.dhenton9000.registration.components.ws;

import com.dhenton9000.registration.bindings.RegisterInput;
import com.dhenton9000.registration.bindings.RegisterResponse;
import java.math.BigDecimal;
import java.util.Calendar;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Session;
import org.mule.api.MuleContext;
import org.mule.api.context.MuleContextAware;
import org.mule.api.transformer.TransformerException;
import org.mule.module.xml.transformer.jaxb.JAXBMarshallerTransformer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;

/**
 * This class was generated by Apache CXF 2.5.1 2012-02-02T13:22:34.057-06:00
 * Generated source version: 2.5.1
 *
 */
@javax.jws.WebService(serviceName = "RegistrationServiceWSDL",
portName = "RegistrationServiceWSDLSOAP",
targetNamespace = "uri:dhenton9000:registrationService",
wsdlLocation = "classpath:wsdl/RegistrationService.wsdl",
endpointInterface = "com.dhenton9000.registration.components.ws.RegistrationServiceWSDL")
public class RegistrationServiceWSDLImpl implements RegistrationServiceWSDL, MuleContextAware {

    private static final Logger logger = LoggerFactory.getLogger(RegistrationServiceWSDLImpl.class.getName());
    private JmsTemplate jmsTemplate = null;
    
    public static final String JAXB_TO_STRING_BEAN_NAME = "registerInputToString";
    public static final String JMS_ACTIVE_MQ_TEMPLATE_BEAN_NAME = "jmsActiveMQTemplate";

   
    private MuleContext muleContext = null;
    
    
    
    /*
     * (non-Javadoc) @see
     * com.dhenton9000.registration.components.ws.RegistrationServiceWSDL#register(com.dhenton9000.registration.components.ws.RegisterInput
     * inputParameter )*
     */

    @Override
    public RegisterResponse register(RegisterInput inputParameter) {
        logger.info("Executing operation register " + inputParameter.getName());
        JAXBMarshallerTransformer tr = (JAXBMarshallerTransformer) getMuleContext().getRegistry().get(JAXB_TO_STRING_BEAN_NAME);
        String inputParameterString = null;
        try {
            inputParameterString = (String) tr.transform(inputParameter);

        } catch (TransformerException ex) {
            logger.error("transformer problem " + ex.getMessage());
        }

        final String outM = inputParameterString;
        jmsTemplate.send(new MessageCreator() {

            @Override
            public Message createMessage(Session sn) throws JMSException {
                return sn.createTextMessage(outM);
            }
        });


        String replyString =
                "Thank you " + inputParameter.getName() + " for " + inputParameter.getRegistrationDetails().getPaymentPlan();
        logger.info("Web service is saying " + replyString);

        RegisterResponse _return = new RegisterResponse();
        _return.setResponseInformation(replyString);
        _return.setCurrentTime(Calendar.getInstance());
        BigDecimal dd = BigDecimal.valueOf(100.25d);
        _return.setTotalCost(dd);
        _return.setPaymentDepartment("Fred");
        return _return;

    }
    
    
     /**
     * @return the jmsTemplate
     */
    public JmsTemplate getJmsTemplate() {
        return jmsTemplate;
    }

    @Override
    public void setMuleContext(MuleContext mc) {
        jmsTemplate = (JmsTemplate) mc.getRegistry().get(JMS_ACTIVE_MQ_TEMPLATE_BEAN_NAME);
        muleContext = mc;
    }

    /**
     * @return the muleContext
     */
    public MuleContext getMuleContext() {
        return muleContext;
    }
    
    
}
