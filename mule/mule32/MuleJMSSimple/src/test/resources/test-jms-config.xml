<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" 
      xmlns:jms="http://www.mulesoft.org/schema/mule/jms" 
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
      xmlns:spring="http://www.springframework.org/schema/beans" 
      xmlns:core="http://www.mulesoft.org/schema/mule/core" 
      xmlns:http="http://www.mulesoft.org/schema/mule/http" 
      xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" 
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" 
      xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security" 
      version="CE-3.2.1" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/3.2/mule-jms.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd 
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.2/mule-http.xsd 
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/3.2/mule-cxf.xsd 
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/3.2/mule-quartz.xsd 
http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/3.2/mule-spring-security.xsd ">
    <spring:beans>
        <spring:bean id="QueueConnectionFactory" name="QueueConnectionFactory" 
                     class="org.apache.activemq.ActiveMQConnectionFactory">
            <spring:property name="brokerURL" value="tcp://localhost:61616"/>
            
        </spring:bean>
    </spring:beans>
    
    <quartz:connector name="quartzConnector" >
        <quartz:factory-property key="org.quartz.scheduler.instanceName" value="MuleScheduler"/>
        <quartz:factory-property key="org.quartz.threadPool.class" value="org.quartz.simpl.SimpleThreadPool"/>
        <quartz:factory-property key="org.quartz.threadPool.threadCount" value="3"/>
        <quartz:factory-property key="org.quartz.scheduler.rmi.proxy" value="false"/>
        <quartz:factory-property key="org.quartz.scheduler.rmi.export" value="false"/>
        <quartz:factory-property key="org.quartz.jobStore.class" value="org.quartz.simpl.RAMJobStore"/>
    </quartz:connector>
    
    <jms:activemq-connector name="jms-connector" specification="1.1"
                            cacheJmsSessions="true"
                            jndiDestinations="true" forceJndiDestinations="true" 
                            maxRedelivery="1" durable="true" 
                            persistentDelivery="true" numberOfConsumers="8"
                            connectionFactory-ref="QueueConnectionFactory">
        <receiver-threading-profile poolExhaustedAction="WAIT" 
                                    doThreading="true" maxThreadsActive="150" 
                                    maxThreadsIdle="50" maxBufferSize="150" threadWaitTimeout="-1"/>
        <dispatcher-threading-profile poolExhaustedAction="WAIT" 
                                      doThreading="true" maxThreadsActive="150" 
                                      maxThreadsIdle="50" maxBufferSize="150" threadWaitTimeout="-1"/>
    </jms:activemq-connector>
    <!--
    <flow name="test_producer">
        <quartz:inbound-endpoint name="sendFileEndpoint"  repeatInterval="10" jobName="sendFile"
                                 connector-ref="quartzConnector">
            <quartz:event-generator-job >
                <quartz:payload file="payload-data.xml"/>
            </quartz:event-generator-job>
        </quartz:inbound-endpoint>
        <message-properties-transformer>
            <add-message-property key="AMQ_SCHEDULED_DELAY"
                                              value="5000" />
        </message-properties-transformer>
        <jms:outbound-endpoint  connector-ref="jms-connector"  queue="testConsumerQueue.in" />
    </flow>
    -->
    
    
    <flow name="test_consumer">
        <jms:inbound-endpoint queue="testConsumerQueue.in" connector-ref="jms-connector"/>
            
        <component class="com.dhenton9000.jms.components.JmsTestComponent"  />
    </flow>
</mule>
