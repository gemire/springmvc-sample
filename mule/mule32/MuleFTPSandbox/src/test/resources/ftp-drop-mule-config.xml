<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:ftp="http://www.mulesoft.org/schema/mule/ftp"
      xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
      xmlns:file="http://www.mulesoft.org/schema/mule/file"
      xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
        http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/3.2/mule-ftp.xsd
        http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/3.2/mule-file.xsd
         http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/3.2/mule-quartz.xsd
        http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/3.2/mule-jms.xsd
        http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.2/mule-vm.xsd">

    <description>
        This configuration demonstrates ftp to local folder then move then 
        announce on jms
    </description>
      
      
    <ftp:connector name="ftpConnector" binary="true"  streaming="true" passive="true" />
    <ftp:endpoint name="ftpEndpoint" host="localhost"  user="ftpuser" password="ftpuser" port="21"
                  path="#(ftp.incoming.dir)"  disableTransportTransformer="true"  connector-ref="ftpConnector">
        <file:filename-wildcard-filter pattern="*.txt" />            
       
    </ftp:endpoint>
    <quartz:connector name="quartzConnector">
        <quartz:factory-property key="org.quartz.scheduler.instanceName" value="quartzConn"/>
        <quartz:factory-property key="org.quartz.threadPool.class" value="org.quartz.simpl.SimpleThreadPool"/>
        <quartz:factory-property key="org.quartz.threadPool.threadCount" value="1"/>
        <quartz:factory-property key="org.quartz.scheduler.rmi.proxy" value="false"/>
        <quartz:factory-property key="org.quartz.scheduler.rmi.export" value="false"/>
        <quartz:factory-property key="org.quartz.jobStore.class" value="org.quartz.simpl.RAMJobStore"/>
    </quartz:connector>
    
       
    <spring:beans>
        <spring:import resource="embedded-activemq-broker.xml" /> 
        <spring:bean id="downloadingBean" name="downloadingBean"
                     class="com.dhenton9000.ftp.processing.FTPDownloadComponent">
            <spring:property name="transferFolderLocation" value="#(ftp.processed.dir)"/>
        </spring:bean>
        <spring:bean id="muleMoverBean" name="muleMoverBean"
                     class="com.dhenton9000.ftp.processing.MuleMoverComponent">
            <spring:property name="destinationFolderLocation" value="#(mule.process.root.in)"/>  
        </spring:bean>
    </spring:beans>
    <jms:activemq-connector name="jmsConnector"
                            
                            specification="1.1"
                            maxRedelivery="0"
                            eagerConsumer="false"
                            connectionFactory-ref="AmqConnectionFactory"
                            disableTemporaryReplyToDestinations="true"
                            persistentDelivery="true" />
                            
    <file:connector name="fileProcessing_inputConnector"
                    autoDelete="true" pollingFrequency="1000" fileAge="3000" />
 
                        
                            
   
    <flow name="ftpProcessFlow">
        <!-- if you use the quartz, the UMO always get byte array despite
         the streaming setting 
        <quartz:inbound-endpoint jobName="readFtpFile" cronExpression="	0/15 * * * * ? *" connector-ref="quartzConnector">
            <quartz:endpoint-polling-job>
                <quartz:job-endpoint ref="ftpEndpoint"/>
            </quartz:endpoint-polling-job>
        </quartz:inbound-endpoint>
        -->
        <ftp:inbound-endpoint  ref="ftpEndpoint" pollingFrequency="5000" />
        <!-- <gzip-uncompress-transformer /> -->
        <!-- add a property that indicates what download this is -->
        <message-properties-transformer>
            <add-message-property key="FTP_DOWNLOAD_TASK_NAME"
                                  value ="ALPHA TASK" />
        </message-properties-transformer>
        <component>
            <spring-object bean="downloadingBean" />
        </component>
        <choice>
            <when expression="message.getProperty('FILE_TRANSFER_STATUS')== 'SUCCESS'" evaluator="groovy">
                <message-properties-transformer>
                    <!-- this says send to a delay queue on active mq -->
                    <add-message-property key="AMQ_SCHEDULED_DELAY"
                                  value ="2000" />
                </message-properties-transformer>
                <jms:outbound-endpoint queue="file-announcement" connector-ref="jmsConnector" />
            </when>
            <otherwise>
                <jms:outbound-endpoint queue="file-failure" connector-ref="jmsConnector" />
            </otherwise>
        </choice>
        <default-exception-strategy>
            <log-component />
        </default-exception-strategy>

    </flow>
    
    <flow name="FileAnnouncementMonitor">
        <jms:inbound-endpoint  queue="file-announcement"  connector-ref="jmsConnector" />
        <!-- this component will move to mule.process.root.in -->
        <component>
            <spring-object bean="muleMoverBean" />
        </component>
      
    </flow>
    
    
    <flow name="FileFailureMonitor">
        <jms:inbound-endpoint queue="file-failure" connector-ref="jmsConnector" />
        <log-component />
    </flow>
    
    <flow name="MuleProcessingComponent">
        <file:inbound-endpoint path="#(mule.process.root.in)"  moveToDirectory="#(mule.process.root.done)"
                               moveToPattern="#[function:datestamp]-#[header:originalFilename].txt"
                               connector-ref="fileProcessing_inputConnector" />
        <log-component />
    </flow>
    
    
</mule>
