<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xm="http://www.mulesource.org/schema/mule/xml/2.2"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:client="http://www.mulesource.org/schema/mule/client/2.2"
	xmlns:cxf="http://www.mulesource.org/schema/mule/cxf/2.2" xmlns:file="http://www.mulesource.org/schema/mule/file/2.2"
	xmlns:https="http://www.mulesource.org/schema/mule/https/2.2"
	xmlns:jdbc="http://www.mulesource.org/schema/mule/ee/jdbc/2.2"
	xmlns:stdio="http://www.mulesource.org/schema/mule/stdio/2.2" xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
	xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
          http://www.mulesource.org/schema/mule/client/2.2 http://www.mulesource.org/schema/mule/client/2.2/mule-client.xsd
          http://www.mulesource.org/schema/mule/xml/2.2 http://www.mulesource.org/schema/mule/xml/2.2/mule-xml.xsd
          http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
          http://www.mulesource.org/schema/mule/cxf/2.2 http://www.mulesource.org/schema/mule/cxf/2.2/mule-cxf.xsd
          http://www.mulesource.org/schema/mule/file/2.2 http://www.mulesource.org/schema/mule/file/2.2/mule-file.xsd
          http://www.mulesource.org/schema/mule/https/2.2 http://www.mulesource.org/schema/mule/https/2.2/mule-https.xsd
          http://www.mulesource.org/schema/mule/ee/jdbc/2.2 http://www.mulesource.org/schema/mule/ee/jdbc/2.2/mule-jdbc-ee.xsd
          http://www.mulesource.org/schema/mule/stdio/2.2 http://www.mulesource.org/schema/mule/stdio/2.2/mule-stdio.xsd
          http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
          ">
	<custom-transformer name="TextFileToArrayList"
		class="com.dhenton9000.aggsplit.TextFileToListTransformer">
	</custom-transformer>
	<custom-transformer name="StringToArrayList"
		class="com.dhenton9000.aggsplit.StringToListTransformer">
	</custom-transformer>
	<byte-array-to-string-transformer
		name="byteToString" />
	<file:connector name="FileObjectFileConnector"
		pollingFrequency="2000" fileAge="2000" moveToDirectory="/eclipseprojects/MuleAggSplit/tmp"
		streaming="false" autoDelete="false">
		<service-overrides messageAdapter="org.mule.transport.file.FileMessageAdapter"
			inboundTransformer="org.mule.transformer.NoActionTransformer" />
	</file:connector>
	<xm:dom-to-xml-transformer name="DomToXml" />
	<xm:xml-to-dom-transformer name="XmlToJDom"
		returnClass="org.dom4j.Document" />
	<xm:xml-to-dom-transformer name="XmlToDom"
		returnClass="org.w3c.dom.Document" />
	<file:connector name="aggSplitConnector" autoDelete="true"
		pollingFrequency="1000" fileAge="1000" streaming="false" />
	<model name="AggSplitModel">
		<service name="StringSplitterService">
			<inbound>
				<inbound-endpoint
					address="file://stringsplitter"
					connector-ref="aggSplitConnector" transformer-refs="byteToString StringToArrayList">
					<file:filename-wildcard-filter
						pattern="*.txt" />
				</inbound-endpoint>
			</inbound>
			<outbound>
				<list-message-splitter-router>
					<vm:outbound-endpoint path="lineProcessorPath" />
				</list-message-splitter-router>
			</outbound>
		</service>
		<service name="TextSplitterService">
			<inbound>
				<inbound-endpoint address="file://filesplitter"
					connector-ref="FileObjectFileConnector" transformer-refs="TextFileToArrayList">
					<file:filename-wildcard-filter
						pattern="*.txt" />
				</inbound-endpoint>
			</inbound>
			<outbound>
				<list-message-splitter-router>
					<vm:outbound-endpoint path="lineProcessorPath" />
				</list-message-splitter-router>
			</outbound>
		</service>
		<service name="IndividualLineProcessorService">
			<inbound>
				<vm:inbound-endpoint path="lineProcessorPath" />
			</inbound>
			<component class="com.dhenton9000.aggsplit.GeneralTestComponent" />
		</service>
		<service name="FirstDataBatchFileService">
			<inbound>
				<inbound-endpoint address="file://xmlsplitter"
					connector-ref="aggSplitConnector" transformer-refs="XmlToJDom">
					<file:filename-wildcard-filter
						pattern="*.xml" />
				</inbound-endpoint>
			</inbound>
			<outbound>
				<expression-splitter-router evaluator="xpath"
					expression="/replies/reply" disableRoundRobin="true" failIfNoMatch="false">
					<vm:outbound-endpoint path="yesProcessPath">
						<expression-filter evaluator="xpath"
							expression="reply/@status='Yes'" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="noProcessPath">
						<expression-filter evaluator="xpath"
							expression="reply/@status='No'" />
					</vm:outbound-endpoint>
					<payload-type-filter expectedType="org.dom4j.Document" />
				</expression-splitter-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="catchAllPath" />
				</forwarding-catch-all-strategy>
			</outbound>
		</service>
		<service name="YesService">
			<inbound>
				<vm:inbound-endpoint path="yesProcessPath" />
			</inbound>
			<log-component />
		</service>
		<service name="NoService">
			<inbound>
				<vm:inbound-endpoint path="noProcessPath" />
				<collection-aggregator-router timeout="6000"
					failOnTimeout="false" />
			</inbound>
			<component class="com.dhenton9000.aggsplit.TestComponent" />
		</service>
		<service name="CatchAllService">
			<inbound>
				<vm:inbound-endpoint path="catchAllPath" />
			</inbound>
			<log-component />
		</service>
	</model>
	<!--
		aggregate by writing the individual files to a folder with datetime in
		the file name then run a quartz job that gets all the files that
		qualify for a day and makes the email message, be sure to obscure CC
		numbers if any
	-->
</mule>