<!--
 Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com

 The software in this package is published under the terms of the CPAL v1.0
 license, a copy of which has been included with this distribution in the
 LICENSE.txt file.
-->
<project name="Mule Examples: Hello Demo" default="deploy">
	<!-- note that the config file must be name <app-name>.xml -->
	<property name="app.name" value="mule-file-test" />
	<property environment="env" />

	<property name="dir.java" value="src" />
	<property name="dir.resources" value="configFiles" />
	<property name="dir.build" value="target" />
	<property name="dir.dist" value="dist" />
	<property name="dir.classes" value="${dir.build}/classes" />
	<property name="user.lib.dir" value="lib" />

	<target name="clean" description="Clean the output directory (start from scratch).">
		<delete includeEmptyDirs="true">
			<fileset dir="${dir.dist}" />
			<fileset dir="${dir.build}" />
		</delete>
		<delete includeEmptyDirs="true" dir="${dir.classes}" />
	</target>

	<target name="init" depends="setup,ifMuleBase,ifMuleHome">
		<!-- Create the build directory if it doesn't exist -->
		<mkdir dir="${dir.classes}" />
		<mkdir dir="${dir.dist}" />
		<mkdir dir="${dir.dist}/lib" />
		<!-- Configure Mule classpath (mirrors wrapper.conf settings -->
		<path id="classpath.mule">
			<pathelement location="${dir.mule.home}/conf" />
			<fileset dir="${dir.mule.home}/lib/user">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${dir.mule.home}/lib/mule">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${dir.mule.home}/lib/opt">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${dir.mule.home}/lib">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>

	<target name="compile" depends="init" description="Compile the application.">

		<javac srcdir="${dir.java}" destdir="${dir.classes}" debug="true" source="1.5" target="1.5">
			<classpath refid="classpath.mule" />
		</javac>


	</target>

	<target name="package" depends="clean,compile" description="Package the application">

		<jar jarfile="${dir.dist}/lib/${app.name}.jar" basedir="${dir.classes}" />

		<copy todir="${dir.dist}/lib">
			<fileset dir="${user.lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset file="${dir.build}/${app.name}.jar" />
		</copy>
		<copy file="${dir.resources}/${app.name}.xml" tofile="${dir.dist}/mule-config.xml" />
		 
    	<zip destfile="${dir.dist}/${app.name}.zip"  basedir="${dir.dist}" />
        	 
	</target>

	<target name="deploy" depends="package" description="Deploy the applications to the Mule server">
		<copy todir="${dir.mule.home}/apps" file="dist/${app.name}.zip" overwrite="true" />
	</target>

	<target name="setup">
		<fail message="MULE_HOME environment variable has not been set.">
			<condition>
				<or>
					<equals arg1="${env.MULE_HOME}" arg2="" />
					<!-- Using a trick here. If there was no MULE_HOME environment
               variable set, ant will set the value to the unprocessed
               template string -->
					<equals arg1="${env.MULE_HOME}" arg2="$${env.MULE_HOME}" />
				</or>
			</condition>
		</fail>
	</target>

	<target name="ifMuleBase" if="env.MULE_BASE">
		<property name="dir.mule.home" value="${env.MULE_BASE}" />
		<property name="dir.user.lib" value="${dir.mule.home}/lib/user/" />
	</target>

	<target name="ifMuleHome" if="env.MULE_HOME" unless="env.MULE_BASE">
		<property name="dir.mule.home" value="${env.MULE_HOME}" />
		<property name="dir.user.lib" value="${dir.mule.home}/lib/user/" />
		<echo message="${dir.mule.home}/lib/user/" />
	</target>
	<!--
    <target name="test" depends="compile">
        <junit haltonerror="true" haltonfailure="true">
            <classpath>
                <pathelement location="${dir.build}/classes"/>
                <pathelement location="src/main/app"/>
                <path refid="classpath.mule"/>
            </classpath>
            <formatter type="plain" usefile="false"/>
            <batchtest fork="yes" todir="${dir.build}">
              <fileset dir="${dir.java}/test/java">
                <include name="**/*Test*.java"/>
              </fileset>
            </batchtest>
        </junit>
    </target>
    -->
</project>
