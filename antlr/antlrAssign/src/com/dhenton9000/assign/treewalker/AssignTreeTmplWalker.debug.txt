package com.dhenton9000.assign.treewalker;

// $ANTLR 3.3 Nov 30, 2010 12:45:30 C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g 2011-03-23 08:37:06

import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.debug.*;
import java.io.IOException;
import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
public class AssignTreeTmplWalker extends DebugTreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "USING", "IDENT", "IF", "THEN", "ELSE", "ENDIF", "AND", "OR", "BECOMES", "TRUE", "FALSE", "VALUE", "STRING", "DOT_OP", "VAR", "IMPLICIT_VAR", "COMMENT", "WS", "ESC_SEQ", "CHAR", "LETTER", "DIGIT", "PROGRAM", "'END_USING'", "'<>'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='"
    };
    public static final int EOF=-1;
    public static final int T__27=27;
    public static final int T__28=28;
    public static final int T__29=29;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__33=33;
    public static final int T__34=34;
    public static final int USING=4;
    public static final int IDENT=5;
    public static final int IF=6;
    public static final int THEN=7;
    public static final int ELSE=8;
    public static final int ENDIF=9;
    public static final int AND=10;
    public static final int OR=11;
    public static final int BECOMES=12;
    public static final int TRUE=13;
    public static final int FALSE=14;
    public static final int VALUE=15;
    public static final int STRING=16;
    public static final int DOT_OP=17;
    public static final int VAR=18;
    public static final int IMPLICIT_VAR=19;
    public static final int COMMENT=20;
    public static final int WS=21;
    public static final int ESC_SEQ=22;
    public static final int CHAR=23;
    public static final int LETTER=24;
    public static final int DIGIT=25;
    public static final int PROGRAM=26;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "var", "comparison", "ifStatement", "consequence", 
        "program", "comparator", "assignment"
    };
    public static final boolean[] decisionCanBacktrack = new boolean[] {
        false, // invalid decision
        false, false, false, false, false, false, false
    };

     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public AssignTreeTmplWalker(TreeNodeStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public AssignTreeTmplWalker(TreeNodeStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this, port, input.getTreeAdaptor());
            setDebugListener(proxy);
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
        }
    public AssignTreeTmplWalker(TreeNodeStream input, DebugEventListener dbg) {
        super(input, dbg, new RecognizerSharedState());

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }

    protected StringTemplateGroup templateLib =
      new StringTemplateGroup("AssignTreeTmplWalkerTemplates", AngleBracketTemplateLexer.class);

    public void setTemplateLib(StringTemplateGroup templateLib) {
      this.templateLib = templateLib;
    }
    public StringTemplateGroup getTemplateLib() {
      return templateLib;
    }
    /** allows convenient multi-value initialization:
     *  "new STAttrMap().put(...).put(...)"
     */
    public static class STAttrMap extends HashMap {
      public STAttrMap put(String attrName, Object value) {
        super.put(attrName, value);
        return this;
      }
      public STAttrMap put(String attrName, int value) {
        super.put(attrName, new Integer(value));
        return this;
      }
    }

    public String[] getTokenNames() { return AssignTreeTmplWalker.tokenNames; }
    public String getGrammarFileName() { return "C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g"; }


    public static class program_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program"
    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:8:1: program : ^( PROGRAM ( ifStatement )+ ) ;
    public final AssignTreeTmplWalker.program_return program() throws RecognitionException {
        AssignTreeTmplWalker.program_return retval = new AssignTreeTmplWalker.program_return();
        retval.start = input.LT(1);

        try { dbg.enterRule(getGrammarFileName(), "program");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(8, 1);

        try {
            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:8:9: ( ^( PROGRAM ( ifStatement )+ ) )
            dbg.enterAlt(1);

            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:11:2: ^( PROGRAM ( ifStatement )+ )
            {
            dbg.location(11,2);
            dbg.location(11,4);
            match(input,PROGRAM,FOLLOW_PROGRAM_in_program36); 

            match(input, Token.DOWN, null); 
            dbg.location(11,12);
            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:11:12: ( ifStatement )+
            int cnt1=0;
            try { dbg.enterSubRule(1);

            loop1:
            do {
                int alt1=2;
                try { dbg.enterDecision(1, decisionCanBacktrack[1]);

                int LA1_0 = input.LA(1);

                if ( (LA1_0==IF) ) {
                    alt1=1;
                }


                } finally {dbg.exitDecision(1);}

                switch (alt1) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:11:13: ifStatement
            	    {
            	    dbg.location(11,13);
            	    pushFollow(FOLLOW_ifStatement_in_program39);
            	    ifStatement();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt1++;
            } while (true);
            } finally {dbg.exitSubRule(1);}


            match(input, Token.UP, null); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(11, 28);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "program");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "program"

    public static class ifStatement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "ifStatement"
    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:13:1: ifStatement : ^( IF ( consequence )+ comparison ) ;
    public final AssignTreeTmplWalker.ifStatement_return ifStatement() throws RecognitionException {
        AssignTreeTmplWalker.ifStatement_return retval = new AssignTreeTmplWalker.ifStatement_return();
        retval.start = input.LT(1);

        try { dbg.enterRule(getGrammarFileName(), "ifStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(13, 1);

        try {
            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:14:2: ( ^( IF ( consequence )+ comparison ) )
            dbg.enterAlt(1);

            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:15:2: ^( IF ( consequence )+ comparison )
            {
            dbg.location(15,2);
            dbg.location(15,4);
            match(input,IF,FOLLOW_IF_in_ifStatement55); 

            match(input, Token.DOWN, null); 
            dbg.location(15,7);
            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:15:7: ( consequence )+
            int cnt2=0;
            try { dbg.enterSubRule(2);

            loop2:
            do {
                int alt2=2;
                try { dbg.enterDecision(2, decisionCanBacktrack[2]);

                int LA2_0 = input.LA(1);

                if ( ((LA2_0>=TRUE && LA2_0<=FALSE)) ) {
                    alt2=1;
                }


                } finally {dbg.exitDecision(2);}

                switch (alt2) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:15:8: consequence
            	    {
            	    dbg.location(15,8);
            	    pushFollow(FOLLOW_consequence_in_ifStatement58);
            	    consequence();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt2++;
            } while (true);
            } finally {dbg.exitSubRule(2);}

            dbg.location(15,22);
            pushFollow(FOLLOW_comparison_in_ifStatement62);
            comparison();

            state._fsp--;


            match(input, Token.UP, null); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(16, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ifStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ifStatement"

    public static class consequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "consequence"
    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:18:1: consequence : ( ^( TRUE ( assignment )+ ) | ^( FALSE ( assignment )+ ) );
    public final AssignTreeTmplWalker.consequence_return consequence() throws RecognitionException {
        AssignTreeTmplWalker.consequence_return retval = new AssignTreeTmplWalker.consequence_return();
        retval.start = input.LT(1);

        try { dbg.enterRule(getGrammarFileName(), "consequence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(18, 1);

        try {
            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:19:2: ( ^( TRUE ( assignment )+ ) | ^( FALSE ( assignment )+ ) )
            int alt5=2;
            try { dbg.enterDecision(5, decisionCanBacktrack[5]);

            int LA5_0 = input.LA(1);

            if ( (LA5_0==TRUE) ) {
                alt5=1;
            }
            else if ( (LA5_0==FALSE) ) {
                alt5=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:20:3: ^( TRUE ( assignment )+ )
                    {
                    dbg.location(20,3);
                    dbg.location(20,5);
                    match(input,TRUE,FOLLOW_TRUE_in_consequence80); 

                    match(input, Token.DOWN, null); 
                    dbg.location(20,10);
                    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:20:10: ( assignment )+
                    int cnt3=0;
                    try { dbg.enterSubRule(3);

                    loop3:
                    do {
                        int alt3=2;
                        try { dbg.enterDecision(3, decisionCanBacktrack[3]);

                        int LA3_0 = input.LA(1);

                        if ( (LA3_0==BECOMES) ) {
                            alt3=1;
                        }


                        } finally {dbg.exitDecision(3);}

                        switch (alt3) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:20:11: assignment
                    	    {
                    	    dbg.location(20,11);
                    	    pushFollow(FOLLOW_assignment_in_consequence83);
                    	    assignment();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt3 >= 1 ) break loop3;
                                EarlyExitException eee =
                                    new EarlyExitException(3, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt3++;
                    } while (true);
                    } finally {dbg.exitSubRule(3);}


                    match(input, Token.UP, null); 

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:20:27: ^( FALSE ( assignment )+ )
                    {
                    dbg.location(20,27);
                    dbg.location(20,29);
                    match(input,FALSE,FOLLOW_FALSE_in_consequence91); 

                    match(input, Token.DOWN, null); 
                    dbg.location(20,35);
                    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:20:35: ( assignment )+
                    int cnt4=0;
                    try { dbg.enterSubRule(4);

                    loop4:
                    do {
                        int alt4=2;
                        try { dbg.enterDecision(4, decisionCanBacktrack[4]);

                        int LA4_0 = input.LA(1);

                        if ( (LA4_0==BECOMES) ) {
                            alt4=1;
                        }


                        } finally {dbg.exitDecision(4);}

                        switch (alt4) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:20:36: assignment
                    	    {
                    	    dbg.location(20,36);
                    	    pushFollow(FOLLOW_assignment_in_consequence94);
                    	    assignment();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt4 >= 1 ) break loop4;
                                EarlyExitException eee =
                                    new EarlyExitException(4, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt4++;
                    } while (true);
                    } finally {dbg.exitSubRule(4);}


                    match(input, Token.UP, null); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(22, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "consequence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "consequence"

    public static class assignment_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "assignment"
    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:26:1: assignment : ( ^( BECOMES vv1= var vv2= var ) | ^( BECOMES vv3= var STRING ) | ^( BECOMES vv4= var VALUE ) );
    public final AssignTreeTmplWalker.assignment_return assignment() throws RecognitionException {
        AssignTreeTmplWalker.assignment_return retval = new AssignTreeTmplWalker.assignment_return();
        retval.start = input.LT(1);

        AssignTreeTmplWalker.var_return vv1 = null;

        AssignTreeTmplWalker.var_return vv2 = null;

        AssignTreeTmplWalker.var_return vv3 = null;

        AssignTreeTmplWalker.var_return vv4 = null;


        try { dbg.enterRule(getGrammarFileName(), "assignment");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(26, 1);

        try {
            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:27:2: ( ^( BECOMES vv1= var vv2= var ) | ^( BECOMES vv3= var STRING ) | ^( BECOMES vv4= var VALUE ) )
            int alt6=3;
            try { dbg.enterDecision(6, decisionCanBacktrack[6]);

            try {
                isCyclicDecision = true;
                alt6 = dfa6.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:28:2: ^( BECOMES vv1= var vv2= var )
                    {
                    dbg.location(28,2);
                    dbg.location(28,4);
                    match(input,BECOMES,FOLLOW_BECOMES_in_assignment115); 

                    match(input, Token.DOWN, null); 
                    dbg.location(28,15);
                    pushFollow(FOLLOW_var_in_assignment119);
                    vv1=var();

                    state._fsp--;

                    dbg.location(28,23);
                    pushFollow(FOLLOW_var_in_assignment123);
                    vv2=var();

                    state._fsp--;


                    match(input, Token.UP, null); 

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:28:30: ^( BECOMES vv3= var STRING )
                    {
                    dbg.location(28,30);
                    dbg.location(28,32);
                    match(input,BECOMES,FOLLOW_BECOMES_in_assignment128); 

                    match(input, Token.DOWN, null); 
                    dbg.location(28,43);
                    pushFollow(FOLLOW_var_in_assignment132);
                    vv3=var();

                    state._fsp--;

                    dbg.location(28,48);
                    match(input,STRING,FOLLOW_STRING_in_assignment134); 

                    match(input, Token.UP, null); 

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:28:58: ^( BECOMES vv4= var VALUE )
                    {
                    dbg.location(28,58);
                    dbg.location(28,60);
                    match(input,BECOMES,FOLLOW_BECOMES_in_assignment140); 

                    match(input, Token.DOWN, null); 
                    dbg.location(28,71);
                    pushFollow(FOLLOW_var_in_assignment144);
                    vv4=var();

                    state._fsp--;

                    dbg.location(28,76);
                    match(input,VALUE,FOLLOW_VALUE_in_assignment146); 

                    match(input, Token.UP, null); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(29, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "assignment");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "assignment"

    public static class var_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "var"
    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:31:1: var : ( ^( VAR id1= IDENT id2= IDENT ) | ^( IMPLICIT_VAR id3= IDENT id4= IDENT ) );
    public final AssignTreeTmplWalker.var_return var() throws RecognitionException {
        AssignTreeTmplWalker.var_return retval = new AssignTreeTmplWalker.var_return();
        retval.start = input.LT(1);

        Object id1=null;
        Object id2=null;
        Object id3=null;
        Object id4=null;

        try { dbg.enterRule(getGrammarFileName(), "var");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(31, 1);

        try {
            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:31:5: ( ^( VAR id1= IDENT id2= IDENT ) | ^( IMPLICIT_VAR id3= IDENT id4= IDENT ) )
            int alt7=2;
            try { dbg.enterDecision(7, decisionCanBacktrack[7]);

            int LA7_0 = input.LA(1);

            if ( (LA7_0==VAR) ) {
                alt7=1;
            }
            else if ( (LA7_0==IMPLICIT_VAR) ) {
                alt7=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(7);}

            switch (alt7) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:32:2: ^( VAR id1= IDENT id2= IDENT )
                    {
                    dbg.location(32,2);
                    dbg.location(32,4);
                    match(input,VAR,FOLLOW_VAR_in_var161); 

                    match(input, Token.DOWN, null); 
                    dbg.location(32,11);
                    id1=(Object)match(input,IDENT,FOLLOW_IDENT_in_var165); 
                    dbg.location(32,21);
                    id2=(Object)match(input,IDENT,FOLLOW_IDENT_in_var169); 

                    match(input, Token.UP, null); 

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:32:29: ^( IMPLICIT_VAR id3= IDENT id4= IDENT )
                    {
                    dbg.location(32,29);
                    dbg.location(32,31);
                    match(input,IMPLICIT_VAR,FOLLOW_IMPLICIT_VAR_in_var173); 

                    match(input, Token.DOWN, null); 
                    dbg.location(32,47);
                    id3=(Object)match(input,IDENT,FOLLOW_IDENT_in_var177); 
                    dbg.location(32,57);
                    id4=(Object)match(input,IDENT,FOLLOW_IDENT_in_var181); 

                    match(input, Token.UP, null); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(33, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "var");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "var"

    public static class comparison_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "comparison"
    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:36:1: comparison : ^(cc1= comparator vv3= var vv4= var ) ;
    public final AssignTreeTmplWalker.comparison_return comparison() throws RecognitionException {
        AssignTreeTmplWalker.comparison_return retval = new AssignTreeTmplWalker.comparison_return();
        retval.start = input.LT(1);

        AssignTreeTmplWalker.comparator_return cc1 = null;

        AssignTreeTmplWalker.var_return vv3 = null;

        AssignTreeTmplWalker.var_return vv4 = null;


        try { dbg.enterRule(getGrammarFileName(), "comparison");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(36, 1);

        try {
            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:37:2: ( ^(cc1= comparator vv3= var vv4= var ) )
            dbg.enterAlt(1);

            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:39:5: ^(cc1= comparator vv3= var vv4= var )
            {
            dbg.location(39,5);
            dbg.location(39,10);
            pushFollow(FOLLOW_comparator_in_comparison206);
            cc1=comparator();

            state._fsp--;


            match(input, Token.DOWN, null); 
            dbg.location(39,25);
            pushFollow(FOLLOW_var_in_comparison210);
            vv3=var();

            state._fsp--;

            dbg.location(39,33);
            pushFollow(FOLLOW_var_in_comparison214);
            vv4=var();

            state._fsp--;


            match(input, Token.UP, null); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(40, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "comparison");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "comparison"

    public static class comparator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "comparator"
    // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:42:1: comparator : ( '<>' | '==' | '!=' | '>' | '>=' | '<' | '<=' );
    public final AssignTreeTmplWalker.comparator_return comparator() throws RecognitionException {
        AssignTreeTmplWalker.comparator_return retval = new AssignTreeTmplWalker.comparator_return();
        retval.start = input.LT(1);

        try { dbg.enterRule(getGrammarFileName(), "comparator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(42, 1);

        try {
            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:43:2: ( '<>' | '==' | '!=' | '>' | '>=' | '<' | '<=' )
            dbg.enterAlt(1);

            // C:\\Documents and Settings\\<username>\\My Documents\\Workspaces\\eclipse\\antlrAssign\\grammars\\treegrammars\\AssignTreeTmplWalker.g:
            {
            dbg.location(43,2);
            if ( (input.LA(1)>=28 && input.LA(1)<=34) ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(44, 34);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "comparator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "comparator"

    // Delegated rules


    protected DFA6 dfa6 = new DFA6(this);
    static final String DFA6_eotS =
        "\20\uffff";
    static final String DFA6_eofS =
        "\20\uffff";
    static final String DFA6_minS =
        "\1\14\1\2\1\22\2\2\4\5\2\3\2\17\3\uffff";
    static final String DFA6_maxS =
        "\1\14\1\2\1\23\2\2\4\5\2\3\2\23\3\uffff";
    static final String DFA6_acceptS =
        "\15\uffff\1\1\1\2\1\3";
    static final String DFA6_specialS =
        "\20\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\1",
            "\1\2",
            "\1\3\1\4",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\17\1\16\1\uffff\2\15",
            "\1\17\1\16\1\uffff\2\15",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "26:1: assignment : ( ^( BECOMES vv1= var vv2= var ) | ^( BECOMES vv3= var STRING ) | ^( BECOMES vv4= var VALUE ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_PROGRAM_in_program36 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ifStatement_in_program39 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_IF_in_ifStatement55 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_consequence_in_ifStatement58 = new BitSet(new long[]{0x00000007F0006000L});
    public static final BitSet FOLLOW_comparison_in_ifStatement62 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TRUE_in_consequence80 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_assignment_in_consequence83 = new BitSet(new long[]{0x0000000000001008L});
    public static final BitSet FOLLOW_FALSE_in_consequence91 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_assignment_in_consequence94 = new BitSet(new long[]{0x0000000000001008L});
    public static final BitSet FOLLOW_BECOMES_in_assignment115 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_var_in_assignment119 = new BitSet(new long[]{0x00000000000C0000L});
    public static final BitSet FOLLOW_var_in_assignment123 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BECOMES_in_assignment128 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_var_in_assignment132 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_STRING_in_assignment134 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BECOMES_in_assignment140 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_var_in_assignment144 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_VALUE_in_assignment146 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VAR_in_var161 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENT_in_var165 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_IDENT_in_var169 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IMPLICIT_VAR_in_var173 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENT_in_var177 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_IDENT_in_var181 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_comparator_in_comparison206 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_var_in_comparison210 = new BitSet(new long[]{0x00000000000C0000L});
    public static final BitSet FOLLOW_var_in_comparison214 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_comparator0 = new BitSet(new long[]{0x0000000000000002L});

}